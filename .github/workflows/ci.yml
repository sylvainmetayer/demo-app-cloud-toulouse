name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #   - name: Check formatting with black
    #     run: |
    #       black --check .

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #   - name: Run unit tests with pytest
    #     run: |
    #       pytest --cov=. --cov-report=xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_URL }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.HARBOR_URL }}/library/app-smetayer:latest,${{ secrets.HARBOR_URL }}/library/app-smetayer:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.HARBOR_URL }}/library/standard-app:buildcache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            PATH_APP=/app

  integration-test:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.7.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Set up k8s Kind cluster
        uses: helm/kind-action@v1.12.0
      - name: Create image pull secret
        run: |
          # Création du namespace de test
          kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret docker-registry harbor-creds \
            --namespace test \
            --docker-server=${{ secrets.HARBOR_URL }} \
            --docker-username=${{ secrets.HARBOR_USERNAME }} \
            --docker-password=${{ secrets.HARBOR_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy app to test cluster
        run: |
          # Création d'un fichier values.yaml temporaire avec l'image mise à jour
          cat <<EOF > /tmp/values-override.yaml
          standard-app:
            image:
              name: ${{ secrets.HARBOR_URL }}/library/app-smetayer:${{ github.sha }}
          EOF

          # Installation/mise à jour du chart Helm avec les valeurs personnalisées
          helm upgrade --install standard-app . \
            --namespace test \
            -f ./values-dev.yaml \
            -f /tmp/values-override.yaml \
            --debug

          sleep 30

          # Check pod status
          echo "Checking pod status..."
          kubectl get pods -n test -l app=standard-app -o wide

          # Check events for troubleshooting
          echo "Checking events..."
          kubectl get events -n test --sort-by='.lastTimestamp'

          # Describe deployment for detailed status and potential errors
          echo "Deployment details:"
          kubectl describe deployment/standard-app-deployment -n test

          # Check logs of any pods that exist
          echo "Pod logs (if available):"
          POD_NAME=$(kubectl get pods -n test -l app=standard-app -o jsonpath="{.items[0].metadata.name}" --ignore-not-found)
          if [ -n "$POD_NAME" ]; then
            kubectl logs $POD_NAME -n test --tail=50
          else
            echo "No pods found yet"
          fi

          # Wait with timeout for deployment to be ready
          echo "Waiting for deployment to be ready..."
          kubectl -n test rollout status deployment/standard-app-deployment --timeout=3m

          # Expose service for tests
          echo "Exposing service for tests..."
          kubectl -n test port-forward svc/standard-app-svc 5000:5000 &
          echo "Waiting for port-forward to establish..."
          sleep 5

          # Test the endpoint
          echo "Testing endpoint..."
          curl -s http://localhost:5000/health || echo "Health check failed"

      - name: Run integration tests
        run: |
          # Run the integration tests against the deployed app
          curl -s http://localhost:5000/health | grep healthy
          curl -s http://localhost:5000/livres | grep "Le DevOps c'est super !"

  update-manifests:
    needs: integration-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write           # 'write' access to repository contents
      #pull-requests: write      # 'write' access to pull requests
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Wariie/demo-app-python

      - name: Update image tag in Helm values
        run: |
          # Installation de yq pour la manipulation YAML
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

          # Mise à jour du tag d'image dans le fichier values.yaml
          yq eval '.image.name = "${{ secrets.HARBOR_URL }}/library/app-smetayer:${{ github.sha }}"' -i charts/standard-app/values.yaml

          # Vérification de la mise à jour
          cat charts/standard-app/values.yaml

      - name: Commit and push changes
        run: |
          git add charts/standard-app/values.yaml
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Update image tag to ${{ github.sha }}"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          #branch: ${{ github.head_ref }}
